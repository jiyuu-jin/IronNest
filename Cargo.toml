[workspace]
resolver = "2"
members = [".", "./crates/*"]

[package]
name = "iron_nest"
version = "0.1.0"
edition = "2024"

[lib]
crate-type = ["cdylib", "rlib"]

[workspace.dependencies]
tokio = { version = "1" }
ipld-core = { version = "0.4.2" }
serde_ipld_dagjson = { version = "0.2.0" }
multibase = { version = "0.9.1" }
multihash-codetable = { version = "0.1.4" }
cid = { version = "0.11.1" }
reqwest = { version = "0.12.9", default-features = false }

[dependencies]
anyhow = "1.0.75"
axum = { version = "0.8.4", optional = true, features = ["macros"] }
base64 = "0.21.5"
bytes = "1.5.0"
cfg-if = "1.0.0"
chrono = { version = "0.4.31", features = ["serde"] }
chrono-tz = "0.8.4"
console_error_panic_hook = "0.1.7"
console_log = "1.0.0"
dotenv = "0.15.0"
futures = "0.3.29"
hex = "0.4.3"
http = "1.2.0"
leptos = { version = "0.8.4" }
server_fn = { version = "0.8.4", features = ["cbor"] }
leptos_axum = { version = "0.8.4", optional = true }
leptos_meta = { version = "0.8.4" }
leptos_router = { version = "0.8.4" }
leptos-use = "0.16.2"
leptos_reactive = "0.7.0-preview2"
log = "0.4.20"
rand = "0.8.5"
reqwest = { workspace = true, features = ["json"] }
serde = { version = "1.0.190", features = ["derive"] }
serde_json = "1.0.107"
sha2 = "0.10.8"
simple_logger = "4.2.0"
ssdp-client = { version = "2.0.0", optional = true }
thiserror = "1.0.50"
tokio = { workspace = true, features = ["full"], optional = true }
tower = { version = "0.4.13", optional = true }
tower-http = { version = "0.4.4", features = ["fs"], optional = true }
uuid = { version = "1.17.0", features = ["v4", "serde", "js"] }
wasm-bindgen = "=0.2.100"
js-sys = "0.3"
web-sys = { version = "0.3.70", features = [
  "MessageEvent",
  "RtcPeerConnection",
  "RtcSignalingState",
  "RtcSdpType",
  "RtcSessionDescriptionInit",
  "RtcPeerConnectionIceEvent",
  "RtcIceCandidate",
  "RtcDataChannel",
  "RtcDataChannelEvent",
] }
wasm-bindgen-futures = "0.4.38"
serde-xml-rs = "0.6.0"
async-openai = { version = "0.17.1", optional = true }
tungstenite = { version = "0.21.0", optional = true }
url = { version = "2.5.0", optional = true }
tokio-tungstenite = { version = "0.21.0", optional = true }
urlencoding = "2.1.3"
sqlx = { version = "0.7.3", optional = true, features = [
  "runtime-tokio",
  "postgres",
  "chrono",
  "uuid",
] }
tokio-cron-scheduler = { version = "0.9.4", optional = true }
p256 = { version = "0.13.2", optional = true, features = ["ecdh"] }
elliptic-curve = { version = "0.13.8", optional = true }
rand_core = { version = "0.6.4", optional = true }
aes = "0.8.3"
cbc = "0.1.2"
async-nats = { version = "0.33.0", optional = true }
hmac = "0.12.1"
serde_yaml = "0.9.34"
gloo-timers = "0.3.0"
csscolorparser = "0.7.0"
getrandom = { version = "0.2.15", features = ["js"] }
leptos_drag_reorder = "0.1.0"
rhai = { version = "1.21.0", features = ["metadata", "sync"] }
ipld-core = { workspace = true }
serde_ipld_dagjson = { workspace = true }
multibase = { workspace = true }
multihash-codetable = { workspace = true, features = ["sha2"] }
cid = { workspace = true, features = ["serde"] }
jsonpath-rust = "1.0.2"

[features]
hydrate = ["leptos/hydrate"]
ssr = [
  "dep:leptos_axum",
  "leptos/ssr",
  "leptos_meta/ssr",
  "dep:axum",
  "dep:tokio",
  "dep:tower",
  "dep:tower-http",
  "leptos_router/ssr",
  "dep:ssdp-client",
  "dep:async-openai",
  "dep:tungstenite",
  "dep:tokio-tungstenite",
  "dep:url",
  "dep:sqlx",
  "dep:tokio-cron-scheduler",
  "dep:p256",
  "dep:elliptic-curve",
  "dep:rand_core",
  "dep:async-nats",
  "reqwest/cookies"
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "0.0.0.0:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
